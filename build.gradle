apply from: file("${rootDir}/gradle/project.gradle")

subprojects {
    group = 'core.framework'
    version = '6.10.4'
}

def elasticVersion = '6.5.1'
def kafkaVersion = '2.1.0'
def jacksonVersion = '2.9.7'
def junitVersion = '5.3.1'
def mockitoVersion = '2.22.0'
def assertjVersion = '3.11.1'

project(':core-ng-api') {
    apply from: file("${rootDir}/gradle/lib.gradle")
}

project(':core-ng') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng-api")
        api 'org.slf4j:slf4j-api:1.8.0-beta2'
        implementation 'org.javassist:javassist:3.24.0-GA'
        implementation "com.fasterxml.jackson.module:jackson-module-afterburner:${jacksonVersion}"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
        implementation 'com.squareup.okhttp3:okhttp:3.12.0'
        implementation 'io.undertow:undertow-core:2.0.15.Final'
        compileOnly "org.apache.kafka:kafka-clients:${kafkaVersion}@jar"
        compileOnly 'dnsjava:dnsjava:2.1.8'     // to support specify nameserver in http client
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testRuntimeOnly 'org.hsqldb:hsqldb:2.4.1'
    }
}

project(':core-ng-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng")
        api "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        api "org.mockito:mockito-core:${mockitoVersion}"
        api "org.assertj:assertj-core:${assertjVersion}"
        implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        compileOnly "org.apache.kafka:kafka-clients:${kafkaVersion}@jar"
        testRuntimeOnly 'org.hsqldb:hsqldb:2.4.1'
    }
}

project(':core-ng-mongo') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng")
        api 'org.mongodb:mongo-java-driver:3.9.0'
        testImplementation project(":core-ng-test")
    }
}

project(':core-ng-mongo-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng-test")
        api project(":core-ng-mongo")
        implementation 'de.bwaldvogel:mongo-java-server:1.9.7'
    }
}

project(':core-ng-search') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng")
        api "org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticVersion}"
        testImplementation project(":core-ng-test")
    }
}

project(':core-ng-search-test') {
    apply from: file("${rootDir}/gradle/lib.gradle")
    dependencies {
        api project(":core-ng-test")
        api project(":core-ng-search")
        implementation "org.elasticsearch.plugin:transport-netty4-client:${elasticVersion}"
        implementation "org.elasticsearch.plugin:reindex-client:${elasticVersion}"
        implementation "org.codelibs.elasticsearch.module:lang-painless:${elasticVersion}"
        implementation "org.codelibs.elasticsearch.module:mapper-extras:${elasticVersion}"      // used by elasticsearch scaled_float
        implementation "org.codelibs.elasticsearch.module:analysis-common:${elasticVersion}"    // used by elasticsearch stemmer
        implementation 'org.apache.logging.log4j:log4j-core:2.11.1'                             // used by elasticsearch local node
    }
}

def mavenURL = hasProperty('mavenURL') ? mavenURL : null    // usage: "gradlew -PmavenURL=/path clean publish"

configure(subprojects.findAll { it.name.startsWith('core-ng') }) {
    apply plugin: 'maven-publish'
    if (mavenURL != null) {
        assert project.file(mavenURL).exists()
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact sourcesJar { classifier 'sources' }
                }
            }
            repositories {
                maven { url mavenURL }
            }
        }
    }
}

project(':log-processor') {
    apply from: file("${rootDir}/gradle/app.gradle")
    dependencies {
        implementation project(':core-ng')
        implementation project(':core-ng-search')
        runtimeOnly "org.apache.kafka:kafka-clients:${kafkaVersion}"
        testImplementation project(':core-ng-test')
        testImplementation project(':core-ng-search-test')
    }
}
